using System;
using System.Collections.Generic;
using System.Text;
using System.Data.SqlClient;

using System.Data.SqlTypes;

using System.Data;
using FM2E.IDAL.Equipment;
using FM2E.Model.Equipment;
using FM2E.SQLServerDAL.Utils;
using FM2E.Model.Utils;
using System.Collections;
using FM2E.Model.Exceptions;
using System.Data.Common;
using FM2E.SQLServerDAL.Equipment;
namespace FM2E.SQLServerDAL.Equipment
{
    public class ExpendableInOut:IExpendableInOut
    {
        private const string TABLE_EXPENDALBEINOUTRECORD = "FM2E_ExpendableInOutRecord";

        private const string TABLE_EXPENDALBEINOUT = "FM2E_ExpendableInOut";

        private const string VIEW_EXPENDABLEINOUT = "FM2E_ExpendableInOutView";

        private const string TABLE_EXPENDABLESHEET = "FM2E_ExpendableInOutsheet";

        private const string TABLE_EXPENDABLEMODIFY = "FM2E_ExpendableInOutModify";

        public long insertsheet(ExpendableSheet model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into "+TABLE_EXPENDABLESHEET+"(");
            strSql.Append("name,time,xinzhengyewu,zongheshiwu,jihuacaiwu,fenguanlingdao,zongjinli)");
            strSql.Append(" values (");
            strSql.Append("@name,@time,@xinzhengyewu,@zongheshiwu,@jihuacaiwu,@fenguanlingdao,@zongjinli)");
            strSql.Append(";select cast(@@IDENTITY AS BIGINT);");
            SqlParameter[] parameters = {
					new SqlParameter("@name", SqlDbType.NVarChar,50),
					new SqlParameter("@time", SqlDbType.DateTime),
					new SqlParameter("@xinzhengyewu", SqlDbType.NChar,10),
					new SqlParameter("@zongheshiwu", SqlDbType.NChar,10),
					new SqlParameter("@jihuacaiwu", SqlDbType.NChar,10),
					new SqlParameter("@fenguanlingdao", SqlDbType.NChar,10),
					new SqlParameter("@zongjinli", SqlDbType.NChar,10)};
            parameters[0].Value = model.name;
            parameters[1].Value = model.time;
            parameters[2].Value = model.xinzhengyewu;
            parameters[3].Value = model.zongheshiwu;
            parameters[4].Value = model.jihuacaiwu;
            parameters[5].Value = model.fenguanlingdao;
            parameters[6].Value = model.zongjinli;

            long id = 0;
            using (SqlDataReader rdr = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters))
            {
                while (rdr.Read())
                {
                    id = rdr.GetInt64(0);
                }
            }
            return id;
        }

        public long insertmodify(ExpendableModify model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into FM2E_ExpendableInOutModify(");
            strSql.Append("SheetID,RecordID,equipmentname,modifytime,oldnum,newnum,userid,username,type)");
            strSql.Append(" values (");
            strSql.Append("@SheetID,@RecordID,@equipmentname,@modifytime,@oldnum,@newnum,@userid,@username,@type)");
            strSql.Append(";select cast(@@IDENTITY AS BIGINT);");
            SqlParameter[] parameters = {
					new SqlParameter("@SheetID", SqlDbType.BigInt,8),
					new SqlParameter("@RecordID", SqlDbType.BigInt,8),
					new SqlParameter("@equipmentname", SqlDbType.NVarChar,50),
					new SqlParameter("@modifytime", SqlDbType.DateTime),
					new SqlParameter("@oldnum", SqlDbType.Int,4),
					new SqlParameter("@newnum", SqlDbType.Int,4),
					new SqlParameter("@userid", SqlDbType.NVarChar,50),
					new SqlParameter("@username", SqlDbType.NVarChar,50),
                    new SqlParameter("@type", SqlDbType.NVarChar,50)};
            parameters[0].Value = model.SheetID;
            parameters[1].Value = model.RecordID;
            parameters[2].Value = model.equipmentname;
            parameters[3].Value = model.modifytime;
            parameters[4].Value = model.oldnum;
            parameters[5].Value = model.newnum;
            parameters[6].Value = model.userid;
            parameters[7].Value = model.username;
            parameters[8].Value = model.type;

            long id = 0;
            using (SqlDataReader rdr = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters))
            {
                while (rdr.Read())
                {
                    id = rdr.GetInt64(0);
                }
            }
            return id;
        }

        public Boolean updaterecordamount(ExpendableInOutRecordInfo model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update FM2E_ExpendableInOutRecord set ");
            strSql.Append("Amount=@Amount");
            strSql.Append(" where ID=@ID ");
            SqlParameter[] parameters = {
					new SqlParameter("@ID", SqlDbType.BigInt,8),
					new SqlParameter("@Amount", SqlDbType.Decimal,9)};
            parameters[0].Value = model.ID;
            parameters[1].Value = model.Amount;

            using (SqlConnection conn = new SqlConnection(SQLHelper.ConnectionString))
            {
                conn.Open();
                try
                {
                    int result = SQLHelper.ExecuteNonQuery(conn, CommandType.Text, strSql.ToString(), parameters);
                    if (result == 0)
                        throw new Exception("没有更新任何数据项");
                }
                catch (Exception e)
                {
                    throw new DALException("更新出入库记录信息失败", e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return true;
        }

        public Boolean updaterecord(ExpendableInOutRecordInfo model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update FM2E_ExpendableInOutRecord set ");
            strSql.Append("Model=@Model,");
            strSql.Append("Amount=@Amount,");
            strSql.Append("Unit=@Unit,");
            strSql.Append("Price=@Price,");
            strSql.Append("CategoryID=@CategoryID,");
            strSql.Append("Remark=@Remark,");
            strSql.Append("CompanyID=@CompanyID,");
            strSql.Append("Type=@Type,");
            strSql.Append("SheetID=@SheetID,");
            strSql.Append("WarehouseID=@WarehouseID,");
            strSql.Append("WarehouseKeeper=@WarehouseKeeper,");
            strSql.Append("WarehouseKeeperName=@WarehouseKeeperName,");
            strSql.Append("Receiver=@Receiver,");
            strSql.Append("ReceiverName=@ReceiverName,");
            strSql.Append("InOutTime=@InOutTime,");
            strSql.Append("Name=@Name");
            strSql.Append(" where ID=@ID ");
            SqlParameter[] parameters = {
					new SqlParameter("@ID", SqlDbType.BigInt,8),
					new SqlParameter("@Model", SqlDbType.NVarChar,50),
					new SqlParameter("@Amount", SqlDbType.Decimal,9),
					new SqlParameter("@Unit", SqlDbType.NVarChar,5),
					new SqlParameter("@Price", SqlDbType.Decimal,9),
					new SqlParameter("@CategoryID", SqlDbType.BigInt,8),
					new SqlParameter("@Remark", SqlDbType.NVarChar,50),
					new SqlParameter("@CompanyID", SqlDbType.VarChar,2),
					new SqlParameter("@Type", SqlDbType.TinyInt,1),
					new SqlParameter("@SheetID", SqlDbType.BigInt,8),
					new SqlParameter("@WarehouseID", SqlDbType.VarChar,2),
					new SqlParameter("@WarehouseKeeper", SqlDbType.VarChar,20),
					new SqlParameter("@WarehouseKeeperName", SqlDbType.NVarChar,50),
					new SqlParameter("@Receiver", SqlDbType.VarChar,20),
					new SqlParameter("@ReceiverName", SqlDbType.NVarChar,50),
					new SqlParameter("@InOutTime", SqlDbType.DateTime),
					new SqlParameter("@Name", SqlDbType.NVarChar,50)};
            parameters[0].Value = model.ID;
            parameters[1].Value = model.Model;
            parameters[2].Value = model.Amount;
            parameters[3].Value = model.Unit;
            parameters[4].Value = model.Price;
            parameters[5].Value = model.CategoryID;
            parameters[6].Value = model.Remark;
            parameters[7].Value = model.CompanyID;
            parameters[8].Value = model.Type;
            parameters[9].Value = model.SheetID;
            parameters[10].Value = model.WarehouseID;
            parameters[11].Value = model.WarehouseKeeper;
            parameters[12].Value = model.WarehouseKeeperName;
            parameters[13].Value = model.Receiver;
            parameters[14].Value = model.ReceiverName;
            parameters[15].Value = model.InOutTime;
            parameters[16].Value = model.Name;

            using (SqlConnection conn = new SqlConnection(SQLHelper.ConnectionString))
            {
                conn.Open();
                try
                {
                    int result = SQLHelper.ExecuteNonQuery(conn, CommandType.Text, strSql.ToString(), parameters);
                    if (result == 0)
                        throw new Exception("没有更新任何数据项");
                }
                catch (Exception e)
                {
                    throw new DALException("更新出入库记录信息失败", e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return true;
        }

        public Boolean updatesheet(ExpendableSheet model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update FM2E_ExpendableInOutsheet set ");
            strSql.Append("name=@name,");
            strSql.Append("time=@time,");
            strSql.Append("xinzhengyewu=@xinzhengyewu,");
            strSql.Append("zongheshiwu=@zongheshiwu,");
            strSql.Append("jihuacaiwu=@jihuacaiwu,");
            strSql.Append("fenguanlingdao=@fenguanlingdao,");
            strSql.Append("zongjinli=@zongjinli");
            strSql.Append(" where id=@id ");
            SqlParameter[] parameters = {
					new SqlParameter("@id", SqlDbType.BigInt,8),
					new SqlParameter("@name", SqlDbType.NVarChar,50),
					new SqlParameter("@time", SqlDbType.DateTime),
					new SqlParameter("@xinzhengyewu", SqlDbType.NChar,10),
					new SqlParameter("@zongheshiwu", SqlDbType.NChar,10),
					new SqlParameter("@jihuacaiwu", SqlDbType.NChar,10),
					new SqlParameter("@fenguanlingdao", SqlDbType.NChar,10),
					new SqlParameter("@zongjinli", SqlDbType.NChar,10)};
            parameters[0].Value = model.id;
            parameters[1].Value = model.name;
            parameters[2].Value = model.time;
            parameters[3].Value = model.xinzhengyewu;
            parameters[4].Value = model.zongheshiwu;
            parameters[5].Value = model.jihuacaiwu;
            parameters[6].Value = model.fenguanlingdao;
            parameters[7].Value = model.zongjinli;

            using (SqlConnection conn = new SqlConnection(SQLHelper.ConnectionString))
            {
                conn.Open();
                try
                {
                    int result = SQLHelper.ExecuteNonQuery(conn, CommandType.Text, strSql.ToString(), parameters);
                    if (result == 0)
                        throw new Exception("没有更新任何数据项");
                }
                catch (Exception e)
                {
                    throw new DALException("更新出入库单号信息失败", e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return true;
        }

        public Boolean deleteAllRecord()
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from FM2E_ExpendableInOutRecord ;");
            try
            {

                SQLHelper.ExecuteNonQuery(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), null);
            }
            catch (Exception e)
            {
                throw new DALException("删除导入前记录失败", e);
            }
            return true;
        }

        public Boolean updateCurrentApprovalStatus(InOutApproval item)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update InOutApproval ");
            strSql.Append(" set xingzhenyewu=@xingzhenyewu,zongheshiwu=@zongheshiwu,jihuacaiwu=@jihuacaiwu,fenguanlingdao=@fenguanlingdao,zongjingli=@zongjingli ");
            strSql.Append(" where ID=@ID ");
            SqlParameter[] param = new SqlParameter[]{
                   new SqlParameter("@ID",SqlDbType.BigInt,8),
                      new SqlParameter("@xingzhenyewu",SqlDbType.NChar,10),
                    new SqlParameter("@zongheshiwu",SqlDbType.NChar,10),
                    new SqlParameter("@jihuacaiwu",SqlDbType.NChar,10),
                    new SqlParameter("@fenguanlingdao",SqlDbType.NChar,10),
                    new SqlParameter("@zongjingli",SqlDbType.NChar,10)
             };
            param[0].Value = item.ID;
            param[1].Value = item.xingzhenyewu;
            param[2].Value = item.zongheshiwu;
            param[3].Value = item.jihuacaiwu;
            param[4].Value = item.fenguanlingdao;
            param[5].Value = item.zongjingli;
            try
            {

                SQLHelper.ExecuteNonQuery(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), param);
            }
            catch (Exception e)
            {
                throw new DALException("更新审批信息失败", e);
            }
            return true;

        }


        public InOutApproval GetCurrentApprovalStatus()
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select top 1  * from InOutApproval ; ");
            InOutApproval item = new InOutApproval();
            Boolean hasitem = false;
            try
            {
                using (SqlDataReader rd = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), null))
                {
                    if (rd.Read())
                    {
                        item = this.GetApprovalData(rd);
                        hasitem = true;
                    }
                }
                if (!hasitem)
                {
                    StringBuilder insertstr = new StringBuilder();
                    insertstr.Append("insert into InOutApproval(xingzhenyewu,zongheshiwu,jihuacaiwu,fenguanlingdao,zongjingli) values ('','','','','');");
                    using (SqlDataReader rdr = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, insertstr.ToString(), null))
                    {
                    }
                    using (SqlDataReader rd = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), null))
                    {
                        if (rd.Read())
                        {
                            item = this.GetApprovalData(rd);
                            hasitem = true;
                        }
                    }

                }
            }
            catch (Exception e)
            {
                throw new DALException("获取审批信息失败", e);
            }
            return item;
        }

        /// <summary>
        /// 读取所有导入审批前纪录
        /// </summary>
        public IList GetallInOutRecord(ExpendableInOutRecordType type)
        {
            ArrayList list = new ArrayList();
            StringBuilder strSql = new StringBuilder();
            //switch (type)
            //{
            //    case ExpendableInOutRecordType.In:
            //        strSql.Append("select  * from FM2E_ExpendableInOut where Type = 1 ;");
            //        break;
            //    case ExpendableInOutRecordType.Out:
            //        strSql.Append("select  * from FM2E_ExpendableInOut where Type = 2 ;");
            //        break;
            //}
            strSql.Append("select  * from FM2E_ExpendableInOutRecord where Type = " + Convert.ToInt32(type) + " ;");
            try
            {
                using (SqlDataReader rd = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), null))
                {
                    while (rd.Read())
                    {
                        ExpendableInOutRecordInfo item = this.GetData(rd);
                        list.Add(item);
                    }
                }
            }
            catch (Exception e)
            {
                throw new DALException("获取所有消耗品失败", e);
            }
            return list;
        }

        /// <summary>
        /// 增加一条数据
        /// </summary>
        public long Add(ExpendableInOutRecordInfo model, DbTransaction trans)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into "+TABLE_EXPENDALBEINOUT+"(");
            strSql.Append("Model,Amount,Unit,Price,CategoryID,Remark,Type,WarehouseID,WarehouseKeeper,WarehouseKeeperName,Receiver,ReceiverName,InOutTime,Name,CompanyID)");
            strSql.Append(" values (");
            strSql.Append("@Model,@Amount,@Unit,@Price,@CategoryID,@Remark,@Type,@WarehouseID,@WarehouseKeeper,@WarehouseKeeperName,@Receiver,@ReceiverName,@InOutTime,@Name,@CompanyID)");
            strSql.Append(";select cast(@@IDENTITY AS BIGINT);");
            SqlParameter[] parameters = {
					new SqlParameter("@Model", SqlDbType.NVarChar,50),
					new SqlParameter("@Amount", SqlDbType.Decimal,9),
					new SqlParameter("@Unit", SqlDbType.NVarChar,5),
					new SqlParameter("@Price", SqlDbType.Decimal,9),
					new SqlParameter("@CategoryID", SqlDbType.BigInt,8),
					new SqlParameter("@Remark", SqlDbType.NVarChar,50),
					new SqlParameter("@Type", SqlDbType.TinyInt,1),
					new SqlParameter("@WarehouseID", SqlDbType.VarChar,2),
					new SqlParameter("@WarehouseKeeper", SqlDbType.VarChar,20),
					new SqlParameter("@WarehouseKeeperName", SqlDbType.NVarChar,50),
					new SqlParameter("@Receiver", SqlDbType.VarChar,20),
					new SqlParameter("@ReceiverName", SqlDbType.NVarChar,50),
					new SqlParameter("@InOutTime", SqlDbType.DateTime),
					new SqlParameter("@Name", SqlDbType.NVarChar,50),
                    new SqlParameter("@CompanyID",SqlDbType.VarChar,2)};
            parameters[0].Value = string.IsNullOrEmpty(model.Model) ? SqlString.Null : model.Model;
            parameters[1].Value = model.Amount;
            parameters[2].Value = string.IsNullOrEmpty(model.Unit) ? SqlString.Null : model.Unit;
            parameters[3].Value = model.Price;
            parameters[4].Value = model.CategoryID;
            parameters[5].Value = string.IsNullOrEmpty(model.Remark) ? SqlString.Null : model.Remark;
            parameters[6].Value = model.Type;
            parameters[7].Value = string.IsNullOrEmpty(model.WarehouseID) ? SqlString.Null : model.WarehouseID;
            parameters[8].Value = string.IsNullOrEmpty(model.WarehouseKeeper) ? SqlString.Null : model.WarehouseKeeper;
            parameters[9].Value = string.IsNullOrEmpty(model.WarehouseKeeperName) ? SqlString.Null : model.WarehouseKeeperName;
            parameters[10].Value = string.IsNullOrEmpty(model.Receiver) ? SqlString.Null : model.Receiver;
            parameters[11].Value = string.IsNullOrEmpty(model.ReceiverName) ? SqlString.Null : model.ReceiverName;
            parameters[12].Value = model.InOutTime == DateTime.MinValue ? SqlDateTime.Null : model.InOutTime;
            parameters[13].Value = string.IsNullOrEmpty(model.Name) ? SqlString.Null : model.Name;
            parameters[14].Value = string.IsNullOrEmpty(model.CompanyID) ? SqlString.Null : model.CompanyID;

            //读取ID
            long id = 1;
            if (trans != null)
            {
                using (SqlDataReader rdr = SQLHelper.ExecuteReader((SqlTransaction)trans, CommandType.Text, strSql.ToString(), parameters))
                {
                    while (rdr.Read())
                    {
                        id = rdr.GetInt64(0);
                    }
                }
            }
            else
            {
                using (SqlDataReader rdr = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters))
                {
                    while (rdr.Read())
                    {
                        id = rdr.GetInt64(0);
                    }
                }
            }
            return id;
        }

        /// <summary>
        /// 增加一条入库前数据
        /// </summary>
        public long AddRecord(ExpendableInOutRecordInfo model, DbTransaction trans)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into " + TABLE_EXPENDALBEINOUTRECORD + "(");
            strSql.Append("Model,Amount,Unit,Price,CategoryID,Remark,Type,WarehouseID,WarehouseKeeper,WarehouseKeeperName,Receiver,ReceiverName,InOutTime,Name,CompanyID,SheetID)");
            strSql.Append(" values (");
            strSql.Append("@Model,@Amount,@Unit,@Price,@CategoryID,@Remark,@Type,@WarehouseID,@WarehouseKeeper,@WarehouseKeeperName,@Receiver,@ReceiverName,@InOutTime,@Name,@CompanyID,@SheetID)");
            strSql.Append(";select cast(@@IDENTITY AS BIGINT);");
            SqlParameter[] parameters = {
					new SqlParameter("@Model", SqlDbType.NVarChar,50),
					new SqlParameter("@Amount", SqlDbType.Decimal,9),
					new SqlParameter("@Unit", SqlDbType.NVarChar,5),
					new SqlParameter("@Price", SqlDbType.Decimal,9),
					new SqlParameter("@CategoryID", SqlDbType.BigInt,8),
					new SqlParameter("@Remark", SqlDbType.NVarChar,50),
					new SqlParameter("@Type", SqlDbType.TinyInt,1),
					new SqlParameter("@WarehouseID", SqlDbType.VarChar,2),
					new SqlParameter("@WarehouseKeeper", SqlDbType.VarChar,20),
					new SqlParameter("@WarehouseKeeperName", SqlDbType.NVarChar,50),
					new SqlParameter("@Receiver", SqlDbType.VarChar,20),
					new SqlParameter("@ReceiverName", SqlDbType.NVarChar,50),
					new SqlParameter("@InOutTime", SqlDbType.DateTime),
					new SqlParameter("@Name", SqlDbType.NVarChar,50),
                    new SqlParameter("@CompanyID",SqlDbType.VarChar,2),
                    new SqlParameter("@SheetID",SqlDbType.BigInt,8)};
            parameters[0].Value = string.IsNullOrEmpty(model.Model) ? SqlString.Null : model.Model;
            parameters[1].Value = model.Amount;
            parameters[2].Value = string.IsNullOrEmpty(model.Unit) ? SqlString.Null : model.Unit;
            parameters[3].Value = model.Price;
            parameters[4].Value = model.CategoryID;
            parameters[5].Value = string.IsNullOrEmpty(model.Remark) ? SqlString.Null : model.Remark;
            parameters[6].Value = model.Type;
            parameters[7].Value = string.IsNullOrEmpty(model.WarehouseID) ? SqlString.Null : model.WarehouseID;
            parameters[8].Value = string.IsNullOrEmpty(model.WarehouseKeeper) ? SqlString.Null : model.WarehouseKeeper;
            parameters[9].Value = string.IsNullOrEmpty(model.WarehouseKeeperName) ? SqlString.Null : model.WarehouseKeeperName;
            parameters[10].Value = string.IsNullOrEmpty(model.Receiver) ? SqlString.Null : model.Receiver;
            parameters[11].Value = string.IsNullOrEmpty(model.ReceiverName) ? SqlString.Null : model.ReceiverName;
            parameters[12].Value = model.InOutTime == DateTime.MinValue ? SqlDateTime.Null : model.InOutTime;
            parameters[13].Value = string.IsNullOrEmpty(model.Name) ? SqlString.Null : model.Name;
            parameters[14].Value = string.IsNullOrEmpty(model.CompanyID) ? SqlString.Null : model.CompanyID;
            parameters[15].Value = model.SheetID;

            //读取ID
            long id = 1;
            if (trans != null)
            {
                using (SqlDataReader rdr = SQLHelper.ExecuteReader((SqlTransaction)trans, CommandType.Text, strSql.ToString(), parameters))
                {
                    while (rdr.Read())
                    {
                        id = rdr.GetInt64(0);
                    }
                }
            }
            else
            {
                using (SqlDataReader rdr = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters))
                {
                    while (rdr.Read())
                    {
                        id = rdr.GetInt64(0);
                    }
                }
            }
            return id;
        }

        /// <summary>
        /// 获取查询对象
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public QueryParam GenerateSearchTerm(ExpendableInOutRecordSearchInfo item)
        {
            string sqlSearch = "where 1=1";
            
            if (item.Name != null && item.Name != "")
                sqlSearch += " and Name = '" + item.Name + "'";

            if (!string.IsNullOrEmpty(item.Model))
            {
                sqlSearch += " and Model = '" + item.Model + "'";
            }
            if (item.WarehouseID != null && item.WarehouseID != "")
                sqlSearch += " and WarehouseID ='" + item.WarehouseID + "'";

            if (!string.IsNullOrEmpty(item.CompanyID))
            {
                sqlSearch += " and CompanyID='" + item.CompanyID + "'";
            }

            if (item.InOutTimeLower != DateTime.MinValue)
            {
                DateTime sqlMinDate = Convert.ToDateTime(SqlDateTime.MinValue.ToString());
                if (DateTime.Compare(item.InOutTimeLower, sqlMinDate) < 0)
                    item.InOutTimeLower = sqlMinDate;

                sqlSearch += " and InOutTime>='" + item.InOutTimeLower.ToString("yyyy-MM-dd") + " 00:00:00'";
            }

            if (item.InOutTimeUpper != DateTime.MinValue)
            {
                DateTime sqlMaxDate = Convert.ToDateTime(SqlDateTime.MaxValue.ToString());
                if (DateTime.Compare(item.InOutTimeUpper, sqlMaxDate) > 0)
                    item.InOutTimeUpper = sqlMaxDate;

                sqlSearch += " and InOutTime<='" + item.InOutTimeUpper.ToString("yyyy-MM-dd") + " 23:59:59'";
            }

            if (item.CategoryID != 0)
                sqlSearch += string.Format(" and (CategoryID in ( select CategoryID from FM2E_GetSubCategories({0})))", item.CategoryID);

            QueryParam searchTerm = new QueryParam();
            searchTerm.TableName = VIEW_EXPENDABLEINOUT;
            searchTerm.ReturnFields = "*";
            searchTerm.OrderBy = "order by ID DESC";
            searchTerm.Where = sqlSearch;
            return searchTerm;
        }

        public QueryParam GenerateSearchRecordTerm(ExpendableInOutRecordInfo item)
        {
            string sqlSearch = "where 1=1";
            if ( item.SheetID != 0)
                sqlSearch += " and SheetID = " + item.SheetID;
            QueryParam searchTerm = new QueryParam();
            searchTerm.TableName = TABLE_EXPENDALBEINOUTRECORD;
            searchTerm.ReturnFields = "*";
            searchTerm.OrderBy = "order by ID ";
            searchTerm.Where = sqlSearch;
            return searchTerm;
        }

        public QueryParam GenerateSearchSheetTerm(ExpendableSheet item)
        {
            string sqlSearch = "where 1=1";
            if (item.id != 0)
                sqlSearch += " and id = " + item.id;
            QueryParam searchTerm = new QueryParam();
            searchTerm.TableName = TABLE_EXPENDABLESHEET;
            searchTerm.ReturnFields = "*";
            searchTerm.OrderBy = "order by id desc";
            searchTerm.Where = sqlSearch;
            return searchTerm;
        }

        public QueryParam GenerateSearchModifyTerm(ExpendableModify item)
        {
            string sqlSearch = "where 1=1";
            if (item.SheetID != null && item.SheetID != 0)
                sqlSearch += " and SheetID = " + item.SheetID;
            if(item.RecordID!=null&&item.RecordID!=0)
                sqlSearch += " and RecordID = " + item.RecordID;
            QueryParam searchTerm = new QueryParam();
            searchTerm.TableName = TABLE_EXPENDABLEMODIFY;
            searchTerm.ReturnFields = "*";
            searchTerm.OrderBy = "order by id";
            searchTerm.Where = sqlSearch;
            return searchTerm;
        }

        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="searchTerm"></param>
        /// <param name="recordCount"></param>
        /// <returns></returns>
        public IList GetList(QueryParam searchTerm, out int recordCount)
        {
            return SQLHelper.GetObjectList(this.GetData, searchTerm, out recordCount);
        }

        public IList GetModifyList(QueryParam searchTerm, out int recordCount)
        {
            return SQLHelper.GetObjectList(this.GetModifyData, searchTerm, out recordCount);
        }

        public IList GetSheetList(QueryParam term, out int recordCount)
        {
            try
            {
                if (term.TableName == null || term.TableName.Trim() == string.Empty)
                {
                    term.TableName = TABLE_EXPENDABLESHEET;
                    term.ReturnFields = "*";
                    term.OrderBy = " order by id desc ";
                    term.Where = "where 1=1 ";
                }
                return SQLHelper.GetObjectList(this.GetSheetData, term, out recordCount);
            }
            catch (Exception e)
            {
                throw new DALException("获取分页失败", e);
            }
        }

        /// <summary>
        /// 获取审批信息
        /// </summary>
        /// <param name="rd"></param>
        /// <returns></returns>
        /// 
        private InOutApproval GetApprovalData(IDataReader rd)
        {
            InOutApproval item = new InOutApproval();

            if (!Convert.IsDBNull(rd["xingzhenyewu"]))
                item.xingzhenyewu = Convert.ToString(rd["xingzhenyewu"]);
            if (!Convert.IsDBNull(rd["zongheshiwu"]))
                item.zongheshiwu = Convert.ToString(rd["zongheshiwu"]);
            if (!Convert.IsDBNull(rd["jihuacaiwu"]))
                item.jihuacaiwu = Convert.ToString(rd["jihuacaiwu"]);
            if (!Convert.IsDBNull(rd["fenguanlingdao"]))
                item.fenguanlingdao = Convert.ToString(rd["fenguanlingdao"]);
            if (!Convert.IsDBNull(rd["zongjingli"]))
                item.zongjingli = Convert.ToString(rd["zongjingli"]);
            if (!Convert.IsDBNull(rd["ID"]))
                item.ID = Convert.ToInt64(rd["ID"]);

            return item;
        }


        private ExpendableSheet GetSheetData(IDataReader rd)
        {
            ExpendableSheet item = new ExpendableSheet();

            if (!Convert.IsDBNull(rd["id"]))
                item.id = Convert.ToInt32(rd["id"]);
            if (!Convert.IsDBNull(rd["name"]))
                item.name = Convert.ToString(rd["name"]);
            if (!Convert.IsDBNull(rd["time"]))
                item.time = Convert.ToDateTime(rd["time"]);
            if (!Convert.IsDBNull(rd["xinzhengyewu"]))
                item.xinzhengyewu = Convert.ToString(rd["xinzhengyewu"]).Trim();
            if (!Convert.IsDBNull(rd["zongheshiwu"]))
                item.zongheshiwu = Convert.ToString(rd["zongheshiwu"]).Trim();
            if (!Convert.IsDBNull(rd["jihuacaiwu"]))
                item.jihuacaiwu = Convert.ToString(rd["jihuacaiwu"]).Trim();
            if (!Convert.IsDBNull(rd["fenguanlingdao"]))
                item.fenguanlingdao = Convert.ToString(rd["fenguanlingdao"]).Trim();
            if (!Convert.IsDBNull(rd["zongjinli"]))
                item.zongjinli = Convert.ToString(rd["zongjinli"]).Trim();

            return item;
        }

        private ExpendableModify GetModifyData(IDataReader rd)
        {
            ExpendableModify item = new ExpendableModify();

            if (!Convert.IsDBNull(rd["id"]))
                item.id = Convert.ToInt32(rd["id"]);

            if (!Convert.IsDBNull(rd["SheetID"]))
                item.SheetID = Convert.ToInt32(rd["SheetID"]);

            if (!Convert.IsDBNull(rd["equipmentname"]))
                item.equipmentname = Convert.ToString(rd["equipmentname"]);

            if (!Convert.IsDBNull(rd["RecordID"]))
                item.RecordID = Convert.ToInt32(rd["RecordID"]);

            if (!Convert.IsDBNull(rd["modifytime"]))
                item.modifytime = Convert.ToDateTime(rd["modifytime"]);

            if (!Convert.IsDBNull(rd["oldnum"]))
                item.oldnum = Convert.ToInt32(rd["oldnum"]);

            if (!Convert.IsDBNull(rd["newnum"]))
                item.newnum = Convert.ToInt32(rd["newnum"]);

            if (!Convert.IsDBNull(rd["userid"]))
                item.userid = Convert.ToString(rd["userid"]);

            if (!Convert.IsDBNull(rd["username"]))
                item.username = Convert.ToString(rd["username"]);

            if (!Convert.IsDBNull(rd["type"]))
                item.type = Convert.ToString(rd["type"]);

            return item;
        }

        /// <summary>
        /// 获取一个对象
        /// </summary>
        /// <param name="rd"></param>
        /// <returns></returns>
        private ExpendableInOutRecordInfo GetData(IDataReader rd)
        {
            ExpendableInOutRecordInfo item = new ExpendableInOutRecordInfo();

            if (!Convert.IsDBNull(rd["ID"]))
                item.ID = Convert.ToInt64(rd["ID"]);

            if (!Convert.IsDBNull(rd["Type"]))
                item.Type =(ExpendableInOutRecordType) Convert.ToInt16(rd["Type"]);

            if (!Convert.IsDBNull(rd["WarehouseID"]))
                item.WarehouseID = Convert.ToString(rd["WarehouseID"]);

            if (!Convert.IsDBNull(rd["WarehouseKeeper"]))
                item.WarehouseKeeper = Convert.ToString(rd["WarehouseKeeper"]);

            if (!Convert.IsDBNull(rd["WarehouseKeeperName"]))
                item.WarehouseKeeperName = Convert.ToString(rd["WarehouseKeeperName"]);

            if (!Convert.IsDBNull(rd["Receiver"]))
                item.Receiver = Convert.ToString(rd["Receiver"]);

            if (!Convert.IsDBNull(rd["ReceiverName"]))
                item.ReceiverName = Convert.ToString(rd["ReceiverName"]);

            if (!Convert.IsDBNull(rd["InOutTime"]))
                item.InOutTime = Convert.ToDateTime(rd["InOutTime"]);

            if (!Convert.IsDBNull(rd["Model"]))
                item.Model = Convert.ToString(rd["Model"]);

            if (!Convert.IsDBNull(rd["Name"]))
                item.Name = Convert.ToString(rd["Name"]);

            if (!Convert.IsDBNull(rd["Amount"]))
                item.Amount = Convert.ToDecimal(rd["Amount"]);

            if (!Convert.IsDBNull(rd["Unit"]))
                item.Unit = Convert.ToString(rd["Unit"]);

            if (!Convert.IsDBNull(rd["Price"]))
                item.Price = Convert.ToDecimal(rd["Price"]);

            if (!Convert.IsDBNull(rd["CategoryID"]))
                item.CategoryID = Convert.ToInt64(rd["CategoryID"]);

            if (!Convert.IsDBNull(rd["Remark"]))
                item.Remark = Convert.ToString(rd["Remark"]);

            if (!Convert.IsDBNull(rd["CompanyID"]))
            {
                item.CompanyID = Convert.ToString(rd["CompanyID"]);
            }

            return item;

        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public void DelExpendableInOut(long ExpendableID,long ID)
        {
            try
            {
                ExpendableInOutRecordInfo ExpendableInOutItem = GetExpendableInOut(ExpendableID);
                StringBuilder strSql = new StringBuilder();
                strSql.Append("delete FM2E_ExpendableInOut ");
                strSql.Append(" where ID=@ExpendableID ");
                SqlParameter[] parameters = {
					new SqlParameter("@ExpendableID", SqlDbType.BigInt)};
                parameters[0].Value = ExpendableID;

                SQLHelper.ExecuteNonQuery(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters);

                Expendable bll = new Expendable();
                ExpendableInfo ExpedableItem=bll.GetExpendable(ID);
                if (ExpendableInOutItem.Type == ExpendableInOutRecordType.In)
                {
                    ExpedableItem.Count = ExpedableItem.Count - ExpendableInOutItem.Amount;
                    if (ExpedableItem.Count < 0)
                    {
                        ExpedableItem.Count = 0;  //归零
                    }
                }
                if (ExpendableInOutItem.Type == ExpendableInOutRecordType.Out)
                {
                    ExpedableItem.Count = ExpedableItem.Count + ExpendableInOutItem.Amount;
                    if (ExpedableItem.Count < 0)
                    {
                        ExpedableItem.Count = 0;  //归零
                    }
                }
                bll.UpdateExpendable(ExpedableItem);  //计数更新

            }
            catch (Exception e)
            {
                throw new DALException("删除消耗品信息失败", e);
            }
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public ExpendableInOutRecordInfo GetExpendableInOut(long ExpendableID)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select top 1  * from FM2E_ExpendableInOut ");
            strSql.Append(" where ID=@ExpendableID ");
            SqlParameter[] parameters = {
					new SqlParameter("@ExpendableID", SqlDbType.BigInt)};
            parameters[0].Value = ExpendableID;
            ExpendableInOutRecordInfo item = new ExpendableInOutRecordInfo();
            try
            {
                using (SqlDataReader rd = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters))
                {
                    if (rd.Read())
                    {
                        item = this.GetData1(rd);

                    }
                }
            }
            catch (Exception e)
            {
                throw new DALException("获取消耗品信息失败", e);
            }
            return item;
        }

        public IList GetExInOut(String companyid, String warehouseid, DateTime datefrom, DateTime dateto, long CategoryID)
        {
            ArrayList list = new ArrayList();
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select  * from FM2E_ExpendableInOut ");
            strSql.Append(" where 1=1");
            if (companyid != "0")
            {
                strSql.Append(" and   WarehouseID=@WarehouseID ");
                strSql.Append(" and   CompanyID=@CompanyID ");
            }
            else
            {
                //donothing
            }
            if (CategoryID != 0)
            {
                strSql.Append(" and CategoryID=@CategoryID ");
            }
            if (DateTime.Compare(datefrom, DateTime.MinValue) != 0)
            {
                DateTime sqlMinDate = Convert.ToDateTime(SqlDateTime.MinValue.ToString());
                if (DateTime.Compare(datefrom, sqlMinDate) < 0)
                    datefrom = sqlMinDate;

                strSql.Append(" and InOutTime>='" + datefrom.ToString("yyyy-MM-dd") + " 00:00:00'");
            }

            if (DateTime.Compare(dateto, DateTime.MinValue) != 0)
            {
                DateTime sqlMaxDate = Convert.ToDateTime(SqlDateTime.MaxValue.ToString());
                if (DateTime.Compare(dateto, sqlMaxDate) > 0)
                    dateto = sqlMaxDate;

                strSql.Append(" and InOutTime<='" + dateto.ToString("yyyy-MM-dd") + " 23:59:59'");
            }
            strSql.Append(" ;");
            SqlParameter[] parameters = {
			    new SqlParameter("@CompanyID", SqlDbType.VarChar,2),
                new SqlParameter("@WarehouseID", SqlDbType.VarChar,2),
                new SqlParameter("@CategoryID", SqlDbType.BigInt)
                                    };
            parameters[0].Value = companyid;
            parameters[1].Value = warehouseid;
            parameters[2].Value = CategoryID;
            try
            {
                using (SqlDataReader rd = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters))
                {
                    while (rd.Read())
                    {
                        ExpendableInOutRecordInfo item = this.GetData(rd);
                        list.Add(item);
                    }
                }
            }
            catch (Exception e)
            {
                throw new DALException("获取所有消耗品失败", e);
            }
            return list;
        }

        public IList GetExInOutYear(String companyid, String warehouseid, DateTime datefrom, DateTime dateto, long CategoryID)
        {
            ArrayList list = new ArrayList();
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select  * from FM2E_ExpendableInOut ");
            strSql.Append(" where 1=1");
            if (companyid != "0")
            {
                strSql.Append(" and   CompanyID=@CompanyID ");
                strSql.Append(" and   WarehouseID=@WarehouseID ");
            }
            else
            {
                //donothing
            }
            if (CategoryID != 0)
            {
                strSql.Append(" and CategoryID=@CategoryID ");
            }
            if (DateTime.Compare(datefrom, DateTime.MinValue) != 0)
            {
                DateTime sqlMinDate = Convert.ToDateTime(SqlDateTime.MinValue.ToString());
                if (DateTime.Compare(datefrom, sqlMinDate) < 0)
                    datefrom = sqlMinDate;

                strSql.Append(" and InOutTime>='" + datefrom.ToString("yyyy-MM-dd") + " 00:00:00'");
            }

            if (DateTime.Compare(dateto, DateTime.MinValue) != 0)
            {
                DateTime sqlMaxDate = Convert.ToDateTime(SqlDateTime.MaxValue.ToString());
                if (DateTime.Compare(dateto, sqlMaxDate) > 0)
                    dateto = sqlMaxDate;

                strSql.Append(" and InOutTime<='" + dateto.ToString("yyyy-MM-dd") + " 23:59:59'");
            }
            strSql.Append(" order by Name");
            strSql.Append(" ;");
            SqlParameter[] parameters = {
			    new SqlParameter("@CompanyID", SqlDbType.VarChar,2),
                new SqlParameter("@WarehouseID", SqlDbType.VarChar,2),
                new SqlParameter("@CategoryID", SqlDbType.BigInt)
                                    };
            parameters[0].Value = companyid;
            parameters[1].Value = warehouseid;
            parameters[2].Value = CategoryID;
            string nametemp = "";
            decimal counttemp = 0;
            ExpendableInOutRecordInfo tempitem = null;
            try
            {
                using (SqlDataReader rd = SQLHelper.ExecuteReader(SQLHelper.ConnectionString, CommandType.Text, strSql.ToString(), parameters))
                {
                    while (rd.Read())
                    {
                        ExpendableInOutRecordInfo item = this.GetData(rd);
                        if (nametemp == "")
                        {
                            nametemp = item.Name.Trim();  //第一个的情况
                        }
                        if (nametemp == item.Name.Trim())
                        {
                            if (item.Type == ExpendableInOutRecordType.In)
                            {
                                counttemp += item.Amount;
                            }
                            else if (item.Type == ExpendableInOutRecordType.Out)
                            {
                                counttemp -= 0;
                            }
                            tempitem = item;
                        }
                        else
                        {
                            tempitem.Amount = counttemp;
                            tempitem.InOutTime = datefrom;
                            list.Add(tempitem);
                            if (item.Type == ExpendableInOutRecordType.In)
                                counttemp = item.Amount;
                            else if (item.Type == ExpendableInOutRecordType.Out)
                                counttemp = 0;
                            nametemp = item.Name.Trim();
                        }
                        
                    }
                    if (tempitem != null)
                    {
                        tempitem.Amount = counttemp;
                        tempitem.InOutTime = datefrom;
                        list.Add(tempitem);
                    }
                }
            }
            catch (Exception e)
            {
                throw new DALException("获取所有消耗品失败", e);
            }
            return list;
        }

        private ExpendableInOutRecordInfo GetData1(IDataReader rd)
        {
            ExpendableInOutRecordInfo item = new ExpendableInOutRecordInfo();

            if (!Convert.IsDBNull(rd["ID"]))
                item.ID = Convert.ToInt64(rd["ID"]);

            if (!Convert.IsDBNull(rd["Type"]))
                item.Type = (ExpendableInOutRecordType)Convert.ToInt16(rd["Type"]);

            if (!Convert.IsDBNull(rd["Amount"]))
                item.Amount = Convert.ToDecimal(rd["Amount"]);

            return item;

        }

    }
}
